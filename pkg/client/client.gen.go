// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for GithubComXiaoxlmMonitorGatewayInternalEnumMetrcisMappingCategory.
const (
	MetrcisMappingCategoryCpu     GithubComXiaoxlmMonitorGatewayInternalEnumMetrcisMappingCategory = "CPU"
	MetrcisMappingCategoryDisk    GithubComXiaoxlmMonitorGatewayInternalEnumMetrcisMappingCategory = "DISK"
	MetrcisMappingCategoryGpu     GithubComXiaoxlmMonitorGatewayInternalEnumMetrcisMappingCategory = "GPU"
	MetrcisMappingCategoryMemory  GithubComXiaoxlmMonitorGatewayInternalEnumMetrcisMappingCategory = "NODE_MEMORY"
	MetrcisMappingCategoryNetwork GithubComXiaoxlmMonitorGatewayInternalEnumMetrcisMappingCategory = "NETWORK"
)

// Defines values for GithubComXiaoxlmMonitorGatewayInternalEnumMetricUniqueID.
const (
	MetricUniqueIDCpuAvgUtil    GithubComXiaoxlmMonitorGatewayInternalEnumMetricUniqueID = "cpu_avg_util"
	MetricUniqueIDDiskUtil      GithubComXiaoxlmMonitorGatewayInternalEnumMetricUniqueID = "disk_util"
	MetricUniqueIDEthRecv       GithubComXiaoxlmMonitorGatewayInternalEnumMetricUniqueID = "eth_recv_bytes_rate"
	MetricUniqueIDEthTrans      GithubComXiaoxlmMonitorGatewayInternalEnumMetricUniqueID = "eth_trans_bytes_rate"
	MetricUniqueIDGpuAllUtil    GithubComXiaoxlmMonitorGatewayInternalEnumMetricUniqueID = "gpu_all_util"
	MetricUniqueIDGpuAvgTemp    GithubComXiaoxlmMonitorGatewayInternalEnumMetricUniqueID = "gpu_avg_temp"
	MetricUniqueIDGpuAvgUtil    GithubComXiaoxlmMonitorGatewayInternalEnumMetricUniqueID = "gpu_avg_util"
	MetricUniqueIDGpuMemAvgUtil GithubComXiaoxlmMonitorGatewayInternalEnumMetricUniqueID = "gpu_mem_avg_util"
	MetricUniqueIDIBRecv        GithubComXiaoxlmMonitorGatewayInternalEnumMetricUniqueID = "ib_recv_bytes_rate"
	MetricUniqueIDIBTrans       GithubComXiaoxlmMonitorGatewayInternalEnumMetricUniqueID = "ib_trans_bytes_rate"
	MetricUniqueIDMemUtil       GithubComXiaoxlmMonitorGatewayInternalEnumMetricUniqueID = "mem_util"
)

// Defines values for ListMetricsMappingParamsCategory.
const (
	CPU        ListMetricsMappingParamsCategory = "CPU"
	DISK       ListMetricsMappingParamsCategory = "DISK"
	GPU        ListMetricsMappingParamsCategory = "GPU"
	NETWORK    ListMetricsMappingParamsCategory = "NETWORK"
	NODEMEMORY ListMetricsMappingParamsCategory = "NODE_MEMORY"
)

// DatatypesJSONMap defines model for datatypes.JSONMap.
type DatatypesJSONMap map[string]interface{}

// GithubComXiaoxlmMonitorGatewayApiRequestMetricsBatchQueryBody defines model for github_com_xiaoxlm_monitor-gateway_api_request.MetricsBatchQueryBody.
type GithubComXiaoxlmMonitorGatewayApiRequestMetricsBatchQueryBody struct {
	Queries []GithubComXiaoxlmMonitorGatewayApiRequestMetricsQueryInfo `json:"queries"`
}

// GithubComXiaoxlmMonitorGatewayApiRequestMetricsQueryInfo defines model for github_com_xiaoxlm_monitor-gateway_api_request.MetricsQueryInfo.
type GithubComXiaoxlmMonitorGatewayApiRequestMetricsQueryInfo struct {
	// End 结束时间
	End            int                                                      `json:"end"`
	LabelValue     map[string]string                                        `json:"labelValue"`
	MetricUniqueID GithubComXiaoxlmMonitorGatewayInternalEnumMetricUniqueID `json:"metricUniqueID"`

	// Start 开始时间
	Start int `json:"start"`

	// Step 步长
	Step int `json:"step"`
}

// GithubComXiaoxlmMonitorGatewayApiResponseListMetricsRESP defines model for github_com_xiaoxlm_monitor-gateway_api_response.ListMetricsRESP.
type GithubComXiaoxlmMonitorGatewayApiResponseListMetricsRESP struct {
	Data *[]GithubComXiaoxlmMonitorGatewayApiResponseMetricsData `json:"data,omitempty"`
}

// GithubComXiaoxlmMonitorGatewayApiResponseMetricsData defines model for github_com_xiaoxlm_monitor-gateway_api_response.MetricsData.
type GithubComXiaoxlmMonitorGatewayApiResponseMetricsData struct {
	HostIP *string `json:"hostIP,omitempty"`

	// MetricUniqueID 指标唯一标识
	MetricUniqueID *GithubComXiaoxlmMonitorGatewayInternalEnumMetricUniqueID `json:"metricUniqueID,omitempty"`

	// MultiMetricsData values 是否有多个值
	MultiMetricsData *bool `json:"multiMetricsData,omitempty"`

	// Values 时序数值
	Values *[]HttputilMetricsInfo `json:"values,omitempty"`
}

// GithubComXiaoxlmMonitorGatewayInternalEnumMetrcisMappingCategory defines model for github_com_xiaoxlm_monitor-gateway_internal_enum.MetrcisMappingCategory.
type GithubComXiaoxlmMonitorGatewayInternalEnumMetrcisMappingCategory string

// GithubComXiaoxlmMonitorGatewayInternalEnumMetricUniqueID defines model for github_com_xiaoxlm_monitor-gateway_internal_enum.MetricUniqueID.
type GithubComXiaoxlmMonitorGatewayInternalEnumMetricUniqueID string

// HttputilErrorRESP defines model for httputil.ErrorRESP.
type HttputilErrorRESP struct {
	Code *int    `json:"code,omitempty"`
	Msg  *string `json:"msg,omitempty"`
}

// HttputilMetricsInfo defines model for httputil.MetricsInfo.
type HttputilMetricsInfo struct {
	Metric *map[string]string `json:"metric,omitempty"`

	// Values 时序数值
	Values *[]HttputilMetricsValues `json:"values,omitempty"`
}

// HttputilMetricsValues defines model for httputil.MetricsValues.
type HttputilMetricsValues struct {
	Color     *string  `json:"color,omitempty"`
	Timestamp *int     `json:"timestamp,omitempty"`
	Value     *float32 `json:"value,omitempty"`
}

// InternalModelMetricsMapping defines model for internal_model.MetricsMapping.
type InternalModelMetricsMapping struct {
	// Category 类别
	Category  *GithubComXiaoxlmMonitorGatewayInternalEnumMetrcisMappingCategory `json:"category,omitempty"`
	CreatedAt *string                                                           `json:"createdAt,omitempty"`
	DeletedAt *MysqlDeletedTime                                                 `json:"deletedAt,omitempty"`

	// Description 描述
	Description *string `json:"description,omitempty"`
	Id          *int    `json:"id,omitempty"`

	// Labels 指标标签(key:标签名；value:标签描述)
	Labels *DatatypesJSONMap `json:"labels,omitempty"`

	// MetricUniqueID 告警唯一标识
	MetricUniqueID *GithubComXiaoxlmMonitorGatewayInternalEnumMetricUniqueID `json:"metricUniqueID,omitempty"`
	UpdatedAt      *string                                                   `json:"updatedAt,omitempty"`
}

// MysqlDeletedTime defines model for mysql.DeletedTime.
type MysqlDeletedTime struct {
	Time *string `json:"time,omitempty"`

	// Valid Valid is true if Time is not NULL
	Valid *bool `json:"valid,omitempty"`
}

// BatchQueryParams defines parameters for BatchQuery.
type BatchQueryParams struct {
	// Authorization Authorization Basic token
	Authorization string `json:"Authorization"`
}

// ListMetricsMappingParams defines parameters for ListMetricsMapping.
type ListMetricsMappingParams struct {
	// Category 类别
	Category *ListMetricsMappingParamsCategory `form:"category,omitempty" json:"category,omitempty"`

	// MetricsUniqueID metrics唯一id
	MetricsUniqueID *string `form:"metricsUniqueID,omitempty" json:"metricsUniqueID,omitempty"`

	// Authorization Authorization Basic token
	Authorization string `json:"Authorization"`
}

// ListMetricsMappingParamsCategory defines parameters for ListMetricsMapping.
type ListMetricsMappingParamsCategory string

// BatchQueryJSONRequestBody defines body for BatchQuery for application/json ContentType.
type BatchQueryJSONRequestBody = GithubComXiaoxlmMonitorGatewayApiRequestMetricsBatchQueryBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// BatchQueryWithBody request with any body
	BatchQueryWithBody(ctx context.Context, params *BatchQueryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BatchQuery(ctx context.Context, params *BatchQueryParams, body BatchQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMetricsMapping request
	ListMetricsMapping(ctx context.Context, params *ListMetricsMappingParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) BatchQueryWithBody(ctx context.Context, params *BatchQueryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchQueryRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchQuery(ctx context.Context, params *BatchQueryParams, body BatchQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchQueryRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMetricsMapping(ctx context.Context, params *ListMetricsMappingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMetricsMappingRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewBatchQueryRequest calls the generic BatchQuery builder with application/json body
func NewBatchQueryRequest(server string, params *BatchQueryParams, body BatchQueryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBatchQueryRequestWithBody(server, params, "application/json", bodyReader)
}

// NewBatchQueryRequestWithBody generates requests for BatchQuery with any type of body
func NewBatchQueryRequestWithBody(server string, params *BatchQueryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monitor-gateway/api/v1/metrics/batch-query")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewListMetricsMappingRequest generates requests for ListMetricsMapping
func NewListMetricsMappingRequest(server string, params *ListMetricsMappingParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monitor-gateway/api/v1/metrics/mapping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MetricsUniqueID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metricsUniqueID", runtime.ParamLocationQuery, *params.MetricsUniqueID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// BatchQueryWithBodyWithResponse request with any body
	BatchQueryWithBodyWithResponse(ctx context.Context, params *BatchQueryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchQueryResponse, error)

	BatchQueryWithResponse(ctx context.Context, params *BatchQueryParams, body BatchQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchQueryResponse, error)

	// ListMetricsMappingWithResponse request
	ListMetricsMappingWithResponse(ctx context.Context, params *ListMetricsMappingParams, reqEditors ...RequestEditorFn) (*ListMetricsMappingResponse, error)
}

type BatchQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GithubComXiaoxlmMonitorGatewayApiResponseListMetricsRESP
	JSON400      *HttputilErrorRESP
	JSON500      *HttputilErrorRESP
}

// Status returns HTTPResponse.Status
func (r BatchQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMetricsMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]InternalModelMetricsMapping
	JSON500      *HttputilErrorRESP
}

// Status returns HTTPResponse.Status
func (r ListMetricsMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMetricsMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BatchQueryWithBodyWithResponse request with arbitrary body returning *BatchQueryResponse
func (c *ClientWithResponses) BatchQueryWithBodyWithResponse(ctx context.Context, params *BatchQueryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchQueryResponse, error) {
	rsp, err := c.BatchQueryWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchQueryResponse(rsp)
}

func (c *ClientWithResponses) BatchQueryWithResponse(ctx context.Context, params *BatchQueryParams, body BatchQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchQueryResponse, error) {
	rsp, err := c.BatchQuery(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchQueryResponse(rsp)
}

// ListMetricsMappingWithResponse request returning *ListMetricsMappingResponse
func (c *ClientWithResponses) ListMetricsMappingWithResponse(ctx context.Context, params *ListMetricsMappingParams, reqEditors ...RequestEditorFn) (*ListMetricsMappingResponse, error) {
	rsp, err := c.ListMetricsMapping(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMetricsMappingResponse(rsp)
}

// ParseBatchQueryResponse parses an HTTP response from a BatchQueryWithResponse call
func ParseBatchQueryResponse(rsp *http.Response) (*BatchQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GithubComXiaoxlmMonitorGatewayApiResponseListMetricsRESP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HttputilErrorRESP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HttputilErrorRESP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListMetricsMappingResponse parses an HTTP response from a ListMetricsMappingWithResponse call
func ParseListMetricsMappingResponse(rsp *http.Response) (*ListMetricsMappingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMetricsMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []InternalModelMetricsMapping
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HttputilErrorRESP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
